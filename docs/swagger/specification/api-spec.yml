openapi: 3.0.3
info:
  title: Микросервисная архитектура API
  description: |
    Полная API документация для микросервисной системы с демонстрацией 
    паттернов проектирования и архитектурных решений.
    
    ## Архитектурные паттерны
    
    ### Gang of Four (GoF) Паттерны:
    - **Singleton**: Подключение к базе данных
    - **Factory Method**: Создание пользователей и заказов
    - **Observer**: Уведомления о изменениях в репозитории
    - **Command**: CQRS команды для модификации данных
    - **Strategy**: Различные стратегии обработки запросов
    
    ### Domain-Driven Design (DDD):
    - **Entities**: User, Order с инкапсулированной бизнес-логикой
    - **Value Objects**: UserStatus, OrderStatus, OrderItem
    - **Aggregates**: Order как агрегат с управлением состоянием
    - **Repository Pattern**: Абстракция доступа к данным
    - **Domain Events**: События для интеграции между контекстами
    
    ### CQRS (Command Query Responsibility Segregation):
    - **Commands**: Операции изменения состояния
    - **Queries**: Операции чтения данных
    - **Handlers**: Обработчики команд и запросов
    
    ### Event Sourcing:
    - **Event Store**: Хранение всех изменений как событий
    - **Event Replay**: Восстановление состояния из событий
    - **Snapshots**: Оптимизация производительности
    
    ## Микросервисная архитектура
    
    - **API Gateway**: Единая точка входа
    - **Service Discovery**: Автоматическое обнаружение сервисов
    - **Circuit Breaker**: Защита от каскадных отказов
    - **Load Balancing**: Распределение нагрузки
    
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000
    description: Development API Gateway
  - url: http://localhost:8080
    description: User Service (Direct)
  - url: http://localhost:8081
    description: Order Service (Direct)

paths:
  # API Gateway Health Check
  /health:
    get:
      tags:
        - Health
      summary: API Gateway Health Check
      description: Проверка состояния API Gateway
      responses:
        '200':
          description: API Gateway работает
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  # User Management APIs
  /api/v1/users:
    get:
      tags:
        - Users
      summary: Получить всех пользователей
      description: |
        Возвращает список всех пользователей в системе.
        Использует Query pattern из CQRS.
      responses:
        '200':
          description: Список пользователей
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    post:
      tags:
        - Users
      summary: Создать пользователя
      description: |
        Создает нового пользователя в системе.
        Использует Command pattern из CQRS и Factory Method для создания.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: Пользователь создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/{id}:
    get:
      tags:
        - Users
      summary: Получить пользователя по ID
      description: |
        Возвращает пользователя по его уникальному идентификатору.
        Демонстрирует Repository pattern.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Данные пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: Пользователь не найден

  /api/v1/users/{id}/block:
    post:
      tags:
        - Users
      summary: Заблокировать пользователя
      description: |
        Блокирует пользователя в системе.
        Демонстрирует доменную бизнес-логику и Observer pattern.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Пользователь заблокирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

  # Order Management APIs (Event Sourcing)
  /orders:
    get:
      tags:
        - Orders
      summary: Получить все заказы
      description: |
        Возвращает все заказы, восстановленные из Event Store.
        Демонстрирует Event Sourcing и CQRS Query.
      responses:
        '200':
          description: Список заказов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderResponse'
    
    post:
      tags:
        - Orders
      summary: Создать заказ
      description: |
        Создает новый заказ и генерирует OrderCreated событие.
        Демонстрирует Event Sourcing и DDD Aggregate.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Заказ создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'

  /orders/{orderId}:
    get:
      tags:
        - Orders
      summary: Получить заказ по ID
      description: |
        Восстанавливает заказ из событий в Event Store.
        Показывает как Event Sourcing восстанавливает состояние.
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Данные заказа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '404':
          description: Заказ не найден

  /orders/{orderId}/items:
    post:
      tags:
        - Orders
      summary: Добавить товар в заказ
      description: |
        Добавляет товар в заказ и генерирует OrderItemAdded событие.
        Демонстрирует бизнес-правила в DDD агрегате.
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddItemRequest'
      responses:
        '200':
          description: Товар добавлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'

  /orders/{orderId}/confirm:
    post:
      tags:
        - Orders
      summary: Подтвердить заказ
      description: |
        Подтверждает заказ и меняет его статус.
        Демонстрирует состояние агрегата и бизнес-правила.
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Заказ подтвержден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'

  # GraphQL Endpoint
  /graphql:
    post:
      tags:
        - GraphQL
      summary: GraphQL Endpoint
      description: |
        Единый GraphQL endpoint для запросов к нескольким микросервисам.
        Демонстрирует Schema Stitching и федерацию GraphQL.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                  description: GraphQL запрос
                variables:
                  type: object
                  description: Переменные запроса
              example:
                query: |
                  query GetUserWithOrders($userId: ID!) {
                    userWithOrders(userId: $userId) {
                      user {
                        id
                        email
                        name
                        status
                      }
                      orders {
                        id
                        status
                        totalAmount
                        items {
                          productId
                          quantity
                          price
                        }
                      }
                    }
                  }
                variables:
                  userId: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: GraphQL ответ
          content:
            application/json:
              schema:
                type: object

components:
  schemas:
    # Common Schemas
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          example: "healthy"
        service:
          type: string
          example: "api-gateway"
        timestamp:
          type: string
          format: date-time

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Описание ошибки
        details:
          type: string
          description: Детали ошибки
      required:
        - error

    # User Schemas
    UserResponse:
      type: object
      description: |
        Пользователь системы - DDD Entity с инкапсулированной бизнес-логикой
      properties:
        id:
          type: string
          format: uuid
          description: Уникальный идентификатор пользователя
        email:
          type: string
          format: email
          description: Email пользователя
        name:
          type: string
          description: Имя пользователя
        status:
          type: string
          enum: [active, inactive, blocked]
          description: Статус пользователя (Value Object)
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - email
        - name
        - status

    CreateUserRequest:
      type: object
      description: DTO для создания пользователя
      properties:
        email:
          type: string
          format: email
          description: Email нового пользователя
        name:
          type: string
          description: Имя нового пользователя
      required:
        - email
        - name

    UsersResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserResponse'
        total:
          type: integer
          description: Общее количество пользователей

    # Order Schemas (Event Sourcing)
    OrderResponse:
      type: object
      description: |
        Заказ - DDD Aggregate Root, состояние восстанавливается из событий
      properties:
        id:
          type: string
          format: uuid
          description: Уникальный идентификатор заказа
        userId:
          type: string
          format: uuid
          description: ID пользователя, создавшего заказ
        status:
          type: string
          enum: [created, confirmed, shipped, delivered, cancelled]
          description: Статус заказа (Value Object)
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
          description: Товары в заказе
        totalAmount:
          type: number
          format: float
          description: Общая стоимость заказа
        createdAt:
          type: string
          format: date-time
        confirmedAt:
          type: string
          format: date-time
          nullable: true
        shippedAt:
          type: string
          format: date-time
          nullable: true
        deliveredAt:
          type: string
          format: date-time
          nullable: true
        cancelledAt:
          type: string
          format: date-time
          nullable: true
        trackingNumber:
          type: string
          nullable: true
        cancellationReason:
          type: string
          nullable: true
        version:
          type: integer
          description: Версия агрегата для оптимистичного конкурентного контроля

    OrderItem:
      type: object
      description: Value Object представляющий товар в заказе
      properties:
        productId:
          type: string
          format: uuid
        quantity:
          type: integer
          minimum: 1
        price:
          type: number
          format: float
          minimum: 0
        totalPrice:
          type: number
          format: float
          description: Вычисляемое поле quantity * price

    CreateOrderRequest:
      type: object
      description: DTO для создания заказа
      properties:
        userId:
          type: string
          format: uuid
          description: ID пользователя
      required:
        - userId

    AddItemRequest:
      type: object
      description: DTO для добавления товара в заказ
      properties:
        productId:
          type: string
          format: uuid
        quantity:
          type: integer
          minimum: 1
        price:
          type: number
          format: float
          minimum: 0
      required:
        - productId
        - quantity
        - price

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []

tags:
  - name: Health
    description: Health check endpoints
  - name: Users
    description: |
      Управление пользователями. Демонстрирует:
      - DDD Entity и Value Objects
      - Repository Pattern
      - CQRS Commands и Queries
      - Observer Pattern для уведомлений
  - name: Orders
    description: |
      Управление заказами. Демонстрирует:
      - Event Sourcing
      - DDD Aggregate Root
      - Domain Events
      - Optimistic Concurrency Control
  - name: GraphQL
    description: |
      GraphQL API для федерации микросервисов.
      Демонстрирует Schema Stitching и кросс-сервисные запросы. 